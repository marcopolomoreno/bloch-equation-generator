function downloadCodigoFonteDessintonia()
{
    //conteúdo do código-fonte
    var codigo;

    codigo = 
`//Source code generated by the Bloch Equation Generator application:
//https://simufisica.com/en/tools/bloch-equation-generator/"
//Developer: Marco Polo Moreno de Souza"
//Contact: marcopolo@unir.br
//Creation date: ` + dataAtualFormatada() + `
//Version of the generator ` + document.getElementById("versao").innerHTML + `

//All units are in SI

#include <stdio.h>
#include <math.h>

int main() {
    FILE* file;
    file = fopen("data.txt", "w");


    double const Pi = 3.14159265358979;

    //Number of Bloch equations
    int const N = ` + N**2 + `;


    //Density matrix
    double rho[N];


    //Adjustments to be made (type control + F to find what needs to be adjusted)
    //Adjustments 1 - Spectrum and temporal integration
    //Adjustments 2 - Rabi frequencies
    //Adjustments 3 - Decays
    //Adjustments 4 - Initial conditions
    //Adjustments 5 - Detunings
    



    //****************** Adjustments 1 - Spectrum and temporal integration ******************//
    //********************************************************************************//`


function ajustes()
{
    var string = `
    //Spectrum width, in MHz
    double const spectrumWidth = ` + larguraEspectro + `;
    
    //Detuning step, in MHz
    double const passo = ` + passoDessintonia + `;

    //Interaction time, in s
    double const tTotal = ` + tempoIntegracao + `e-6;

    //Time integration step, in s
    double const h = ` + passoTemporal + `e-12;
    `

    return string
}

    codigo += ajustes()

    //double A12, A13, etc
    //double B12, B13, etc
    function omega()
    {
        var string = "\n\t//Real part of Rabi frequencies\n"

        string = string + "\tdouble const rabiFreq = 2*Pi*5e6;\n\n"
        
        string = string + gerarParametros("A", "FR", "rabiFreq", "menor-maior")

        string = string + "\n\t//Imaginary part of Rabi frequencies\n"

        string = string + gerarParametros("B", "FR", "0", "menor-maior")

        return string;
    }

    codigo += 
    `



    //******************* Adjustments 2 - Rabi frequencies ***************************//
    //*******************************************************************************//`+ omega();



    function gerarParametros(a, b, valor, ordem)
    {
        var string = ""
        
        for (var k=0; k<=N-1; k++)
        {
            for (var p=k+1; p<=N-1; p++)
            {
                if (document.getElementById("switch" + b + String(k+1) + String(p+1) ).checked)
                {
                    if (ordem === "menor-maior")
                        string = string + "\tdouble " + a + String(k+1) + String(p+1) + " = " + valor + ";\n"

                    if (ordem === "maior-menor")
                        string = string + "\tdouble " + a + String(p+1) + String(k+1) + " = " + valor + ";\n"
                }
            }
        }

        return string;
    }


    //Estados que não decaem
    function estadosSemDecaimento()
    {
        var estados = 0;

        for (var k=0; k<=N-1; k++)
        {
            if (nivel[k].decaimentos === 0)
            {
                estados = estados + 1;
            }
        }

        return estados;
    }
    
    
    //double Gamma21, Gamma32, etc
    function Gamma()
    {
        var string = "\n\t//Decay rates of excited states\n"

        string = string + "\tdouble const decay = 2*Pi*5e6;\n\n"
        
        for (var p=0; p<=N-1; p++)
        {
            for (var q=p+1; q<=N-1; q++)
            {
                if (document.getElementById("switchTP" + String(Math.min(p+1,q+1)) + String(Math.max(p+1,q+1)) ).checked)
                {
                    if (nivel[p].y > nivel[q].y)
                    {
                        string = string + "\tdouble Gamma" + String(q+1) + String(p+1) + " = decay/" + nivel[q].decaimentos + ".0;\n"
                    }

                    if (nivel[q].y > nivel[p].y)
                    {
                        string = string + "\tdouble Gamma" + String(p+1) + String(q+1) + " = decay/" + nivel[p].decaimentos + ".0;\n"
                    }
                }
            }
        }        

        return string;
    }


    //double gamma12, gamma13, etc
    function gamma()
    {
        var string = "\n\t//Decay rates of coherences\n"
        
        for (var k=0; k<=N-1; k++)
        {
            for (var p=k+1; p<=N-1; p++)
            {
                if (nivel[k].decaimentos === 0 && nivel[p].decaimentos === 0)
                    string = string + "\tdouble gamma" + String(k+1) + String(p+1) + " = 0;\n"                   

                if (nivel[k].decaimentos > 0 && nivel[p].decaimentos > 0)
                    string = string + "\tdouble gamma" + String(k+1) + String(p+1) + " = decay;\n"
                else 
                if (nivel[k].decaimentos > 0 || nivel[p].decaimentos > 0)
                    string = string + "\tdouble gamma" + String(k+1) + String(p+1) + " = 0.5*decay;\n"
            }
        }

        return string;
    }


    codigo +=
    `



    //************************ Adjustments 3 - Decays ******************************//
    //*******************************************************************************//` + Gamma() + gamma();



    //double delta21, delta31, etc
    //ver qual frequência será variada
    function delta()
    {
        var string = "\n\t//Detunings\n"
        
        for (var k=0; k<=N-1; k++)
        {
            for (var p=k+1; p<=N-1; p++)
            {
                string = string + "\tdouble delta" + String(p+1) + String(k+1) + " = 0;\n"
            }
        }

        return string;
    }


    codigo +=
    `\t//*******************************************************************************//



    ` + delta();


    function populacoesIniciais()
    {
        var string = "\n\t//Initial populations\n"

        string = string + "\tdouble pop[N+1];\n"

        for (var k=1; k<=N; k++)
        {
            if (nivel[k-1].decaimentos === 0)
                string = string + "\tpop[" + String(k) + "] = 1.0/" + estadosSemDecaimento() + ".0;\n"
            else
                string = string + "\tpop[" + String(k) + "] = 0;\n"
        }

        string = string + "\n\t//Initial coherences\n"

        for (var k=N+1; k<=N**2; k++)
        {
            string = string + "\tpop[" + String(k) + "] = 0;\n"
        }

        return string;
    }

    codigo +=
    `



    //************************ Adjustments 4 - Initial conditions ***********************//
    //*******************************************************************************//` + populacoesIniciais() + `\t//*******************************************************************************//
    



    //Number of detuning points
    double D = spectrumWidth/(2*passo);

    //Tempo
    double t;
    
    //Number of time points
    double T = tTotal/h + 1;


    //Variables - data.txt file\n`

    function printArquivo()
    {
        var string = '\tfprintf(file, "\\\\g(d)\\\\-(21)/2\\\\g(p) '
        
        //Populações  \g(r)\-(11)
        for (var k=0; k<=N-1; k++)
        {
            string = string + "\\\\g(r)\\\\-(" + String(k+1) + String(k+1) + ") "
        }

        //Coerências
        for (var k=0; k<=N-1; k++)
        {
            for (var p=k+1; p<=N-1; p++)
            {
                string = string + "Re(\\\\g(s)\\\\-(" + String(k+1) + String(p+1) + ")) "
                string = string + "Im(\\\\g(s)\\\\-(" + String(k+1) + String(p+1) + ")) "
            }
        }

        string = string.slice(0, -1);
        string = string + '\\n");\n';

        //Unidades
        string = string + `\tfprintf(file, "MHz`

        for (var k=0; k<=N**2-1; k++)
        {
            string = string + " "
        }

        string = string + '\\n");\n';

        return string;
    }


    codigo += printArquivo() + 
    `



    //***************************** Bloch equations *********************************//
    //*********************************************************************************//`


    function variaveis()
    {
        var string = "\n\tdouble bloch("

        //Populações
        for (var k=0; k<=N-1; k++)
        {
            string = string + "double a" + String(k+1) + String(k+1) + ", "
        }
        
        //Coerências
        for (var k=0; k<=N-1; k++)
        {
            for (var p=k+1; p<=N-1; p++)
            {
                string = string + "double a" + String(k+1) + String(p+1) + ", "
                string = string + "double b" + String(k+1) + String(p+1) + ", "
            }
        }

        string = string.slice(0, -1);
        string = string.slice(0, -1);
        string = string + ", int j)\n    {\n"

        return string;
    }


    codigo += variaveis() + eqBloch + `
    }
    //*********************************************************************************//


    int d, k, j;


    //Detuning loop
    for (d=-D; d<=D; d++)
    {`

    function condicoesIniciais()
    {
        var string = `
        for (j=0; j<=N-1; j++)
            rho[j] = pop[j+1];
    `
        return string;
    }



    function deltaDoisFotons2(a, b)
    {
        var k = 1, key = false

        do
        {
            if (k !== a && k !== b)
            {
                var elemento1 = String(Math.max(a, k)) + String(Math.min(a, k))
                var elemento2 = String(Math.max(k, b)) + String(Math.min(k, b))

                var elemento1b = String(Math.min(a, k)) + String(Math.max(a, k))
                var elemento2b = String(Math.min(k, b)) + String(Math.max(k, b))

                if (document.getElementById("switchFR" + elemento1b).checked &&
                    document.getElementById("switchFR" + elemento2b).checked)
                {
                    key = true;
                    var sinal1 = " ", sinal2 = " + "

                    if (a > k)
                        sinal1 = " - "

                    if (k > b)
                        sinal2 = " - "

                    var saida = "\t\tdelta" + String(b) + String(a) + " =" + sinal1 + "delta" + elemento1
                                                                           + sinal2 + "delta" + elemento2 + ";\n";//console.log(saida)

                    return saida
                }
            }

            k++;
        }
        while (k<=N && key === false)
    }



    //Possui bug
    function dessintonias2()
    {
        var string = "";
        var primeiro = true;

        string = string + "\n"

        for (var k=0; k<=N-1; k++)
            for (var p=k+1; p<=N-1; p++)
            {
                if (primeiro)
                {
                    string = string + "\t\tdelta" + String(p+1) + String(k+1) + " = 2*Pi*passo*d*1e6;   //Field sweeping frequency\n"
                    primeiro = false
                }
                else
                if (document.getElementById("switchFR" + String(k+1) + String(p+1)).checked)
                    string = string + "\t\tdelta" + String(p+1) + String(k+1) + " = 0;\n"
            }                    

        string = string + "\n"

        string = string + "\t\t//Two-photon coherences\n"

        for (var k=0; k<=N-1; k++)
            for (var p=k+1; p<=N-1; p++)
            {
                if (!document.getElementById("switchFR" + String(k+1) + String(p+1)).checked && deltaDoisFotons2(k+1, p+1) !== undefined)
                {
                    string = string + deltaDoisFotons2(k+1, p+1)
                    console.log(deltaDoisFotons2(k+1, p+1))
                }                    
            }

        string = string + "\n\t\t//Three-photon or more coherences: adjust if they exist\n"

        return string;
    }


    codigo +=
    `
        t = 0;` + condicoesIniciais() + `

        //************************** Adjustments 5 - Detunings ***************************//
        //*******************************************************************************//
    ` + dessintonias2() + `
        //*******************************************************************//


        //Temporal loop
        for (k=0; k<=T; k++)
        {\n\t\t\t`

    function k1234()
    {
        var string = "double "
        
        for (var k=0; k<=3; k++)
        {
            string = string + "k" + String(k+1) + "[" + String(N**2) + "], "
        }

        string = string.slice(0, -1);
        string = string.slice(0, -1);
        string = string + ";\n"

        return string;
    }


    function kRungeKutta()
    {
        var string = ""
        var add = ""

        for (var k=0; k<=3; k++)
        {
            string = string + "\n            //Step " + String(k+1) + "\n"
            
            string = string + "\t\t\tfor (j=0; j<=N-1; j++)\n"
            string = string + "\t\t\t{\n"
            string = string + "\t\t\t\tk" + String(k+1) + "[j] = bloch("
            
            for (var p=0; p<=N**2-1; p++)
            {
                if (k===1 || k===2)
                    add = " + 0.5*h*k" + String(k) + "[" + String(p) + "]"

                if (k===3)
                    add = " + h*k" + String(k) + "[" + String(p) + "]"

                string = string + "rho[" + String(p) + "]" + add + ", "
            }
            
            string = string + "j);\n"
            string = string + "\t\t\t}\n"
        }

        return string;
    }


    codigo += k1234() + kRungeKutta() + 
    `
            //Update of the density matrix elements
            for (j=0; j<=N-1; j++)
            {
                rho[j] = rho[j] + h*(k1[j] + 2.0*k2[j] + 2.0*k3[j] + k4[j])/6.0;
            }

            t = t + h;
        }

        //Print the result on the screen
        printf("%.2f", passo*d);
        printf("`

    function impressaoResultado()
    {
        var string = ""
        
        for (var k=0; k<=N**2-1; k++)
        {
            string = string + ' %g'
        }

        string = string + '\\n"'

        for (var k=0; k<=N**2-1; k++)
        {
            string = string + ", rho[" + String(k) + "]"
        }

        return string;
    }       

            
    codigo += impressaoResultado() + `);\n

        //Print the result in the data.txt file
        fprintf(file, "%.2f", passo*d);
        fprintf(file, "` + impressaoResultado() + `);
    }

    fclose(file);

    return 0;
}
`

    var nomeArquivo = "detuning.c";

    var blob = new Blob([codigo], { type: 'text/plain' });

    var link = document.createElement('a');
    link.href = URL.createObjectURL(blob);
    link.download = nomeArquivo;

    // Simula o clique no link para iniciar o download
    link.click();

    // Limpa o objeto URL após o download
    URL.revokeObjectURL(link.href);
}